{"componentChunkName":"component---src-templates-blog-post-js","path":"/google-summer-of-code-week-2/","result":{"data":{"site":{"siteMetadata":{"title":"GSoC-21 @ MetaCall","author":"Harsh Mishra","lang":"en"}},"markdownRemark":{"id":"d27ffc78-1760-5c75-9468-8f17b8287830","excerpt":"Google Summer of Code 2021 Coding Period started with a bang on June 7. After weeks of pre-planning and preparation, I was finally able to set things in motion…","html":"<p><a href=\"https://summerofcode.withgoogle.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Summer of Code 2021</a> Coding Period started with a bang on June 7. After weeks of pre-planning and preparation, I was finally able to set things in motion with my project. The second week of the Coding Period required me to research on the possible ways of integrating the MetaCall APIs with the Jupyter Kernel after the skeleton kernel was initialized and set up.</p>\n<p>The end product of the Google Summer of Code coding period is to develop a <a href=\"https://github.com/metacall/jupyter-kernel\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jupyter Notebook interface</a> that supports various runtimes and can enable developers to inter-mix languages amongst each other.</p>\n<p><img src=\"/fedb6d29de82553ddc414f2ece099dce/so-it-begins.gif\" alt=\"image\"></p>\n<blockquote>\n<p>“So it begins!” ~ Theoden, Lord of the Rings - The Two Towers</p>\n</blockquote>\n<h2 id=\"progress\" style=\"position:relative;\"><a href=\"#progress\" aria-label=\"progress permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Progress</h2>\n<p>The second week of the coding period involved a lot of pair programming with <a href=\"https://twitter.com/parradeadlock\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vicente</a>, the creator of <a href=\"https://twitter.com/metacallio\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MetaCall.io</a> who is mentoring me alongside my GSoC Mentor <a href=\"https://github.com/giarve\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gill</a>. After the initial kernel was set up, we decided to take a look at how we can embed the MetaCall APIs into the kernel.</p>\n<p>MetaCall provides two high-level APIs to load the code into its polyglot runtime and execute the same. The <code class=\"language-text\">metacall_load_from_file</code> API allows us to load the script from a file present in a directory and execute the same. The <code class=\"language-text\">metacall_load_from_memory</code> API allows to execute the code by passing it as a string directly from the memory, without saving the same in a file.</p>\n<p>While it was initially decided that we wished to go with the <code class=\"language-text\">metacall_load_from_file</code> API, we quickly turned the specification towards using the <code class=\"language-text\">metacall_load_from_memory</code> API to make it easy for us to load and execute the code. However this is where the first major blocker was encountered.</p>\n<p><img src=\"/120f941531587542b76856b0a936f2d2/and-it-happens.gif\" alt=\"image\"></p>\n<blockquote>\n<p>And it just happens ¯_(ツ)_/¯</p>\n</blockquote>\n<p>MetaCall’s <a href=\"https://metacall.io/doc.html#/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Polyglot runtime</a> behaves quite differently than <a href=\"https://docs.python.org/3/library/python.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python’s actual runtime</a>. It simply means that a standard Python script, which would be executed by the Python runtime, would behave quite differently compared to the same execution carried on the MetaCall’s runtime. Let’s take an example for the same. Suppose we have a file named <code class=\"language-text\">script.py</code> which contains the following snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print(__name__)</code></pre></div>\n<p>Let us execute it via Python: <code class=\"language-text\">$ python3 script.py</code></p>\n<p>It would present the following output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">__main__</code></pre></div>\n<p>However if we execute the same script using MetaCall, using: <code class=\"language-text\">$ metacall script.py</code></p>\n<p>It would present the following output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">script.py\nScript (script.py) loaded correctly</code></pre></div>\n<p>The <strong>name</strong> variable is a special Python variable which retrieves its value depending on how we execute it. In the case of MetaCall, we needed a way to launch our Jupyter kernel, not using Python’s runtime but instead MetaCall’s runtime.</p>\n<p>I made a Pull Request (<a href=\"https://github.com/metacall/jupyter-kernel/pull/10\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#10</a>) that added a <code class=\"language-text\">launcher.py</code> file that enables us to launch the Jupyter Kernel using MetaCall, which now makes it possible to embed the MetaCall APIs into the kernel and execute the code on the basis of that.</p>\n<h2 id=\"blockers\" style=\"position:relative;\"><a href=\"#blockers\" aria-label=\"blockers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Blockers</h2>\n<p>It would be no heresy to say that the whole week was a blocker this time!</p>\n<p>The first blocker, as stated earlier, is how we embed the MetaCall into the kernel. Though the standard way of using the APIs is through the PyPi package and importing them up, the difference in runtimes prevent the usage of the APIs. It eventually leads the kernel to throw up multiple errors and shut down the execution overall.</p>\n<p>There are a couple of problems with this whole approach. <a href=\"https://github.com/metacall/core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MetaCall Core</a> doesn’t support arguments as such. Second, MetaCall uses its own versions of <code class=\"language-text\">pip</code> (and <code class=\"language-text\">npm</code> as well) to avoid polluting inter-related packages and ensure portability. This makes it impossible for MetaCall to be used with isolated environments (like <a href=\"https://docs.python.org/3/tutorial/venv.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Virtual Environments</a> in Python).</p>\n<p>As we discovered multiple blockers, I worked with Vicente to find the bugs which would be then fixed by him over the Core library. During these efforts, we managed to fix the double execution problems and other bugs in the Python loader, improved error handling, mitigated minor bugs and added support for <code class=\"language-text\">__main__</code> on the Python loader.</p>\n<p>It was also a hard struggle against finding installed packages on my Linux machine and doing hacky stuff with Vicente to find how we can run them using MetaCall’s runtime. In some areas, we had success. In some, not. And we are overall keeping this as a scope to further improve on in the coming weeks.</p>\n<p><img src=\"/08223b123024e116a149c61cf34d4395/i-can-do-this.gif\" alt=\"image\"></p>\n<h2 id=\"learnings\" style=\"position:relative;\"><a href=\"#learnings\" aria-label=\"learnings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Learnings</h2>\n<p>The second week seems to have the most defining week of my development experience so far. We were presented with a problem that was definitely beyond the scope of what we had originally planned but it overall helped us improve on the upstream project (<a href=\"https://github.com/metacall/core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MetaCall Core</a>) and ensure that the project development continues smoothly in the coming weeks.</p>\n<p>In the second week, I got a deeper dive into the MetaCall Core Project and I got a chance to study the <a href=\"https://github.com/metacall/core/tree/develop/source/loaders/py_loader\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python loader</a> and the <a href=\"https://github.com/metacall/core/tree/develop/source/ports/py_port\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python port</a>. Apart from the same, I got a chance to have short and frequent debugging sessions with Vicente where we discovered bugs in the Python port and worked on fixing them.</p>\n<p>I also got a chance to go further studying the <a href=\"https://github.com/ipython/ipython\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IPython</a> and <a href=\"https://github.com/jupyter/notebook\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Notebook</a>, in the overall Jupyter spectrum to understand how the projects are shaped and how they play out. It was a welcoming and delightful experience overall, something that I would carry forward as a learning experience in the coming weeks ahead.</p>\n<p><img src=\"/f54fc3042812d06a7e982e5162a51412/i-m-learning.gif\" alt=\"image\"></p>\n<h2 id=\"plans-for-next-week\" style=\"position:relative;\"><a href=\"#plans-for-next-week\" aria-label=\"plans for next week permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plans for next week</h2>\n<p>While I’m writing this blog, the third week of the Coding period is already in progress. During this week, I would like to make sure that MetaCall’s initialization is successful and scripts can be loaded and executed successfully. I would also be spending some time figuring out the language detection part. I have been planning to use <code class=\"language-text\">guesslang</code> which is a <a href=\"https://pypi.org/project/guesslang/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PyPi package</a> that performs exceptionally, with the aid of deep learning. However its usage of data science packages like Tensorflow would affect the performance of the kernel significantly and I’m trying to find a walk-through around the same.</p>\n<p>The second-week progress has been received positively by my mentor and the community. It has been a great experience working so far and I hope I can work even more in the coming weeks and successfully execute the project.</p>\n<p>Signing off the second-week log about my Google Summer of Code experience!</p>\n<p><img src=\"https://i.imgur.com/NDIkyfG.gif\" alt=\"image\"></p>","timeToRead":5,"frontmatter":{"title":"GSoC '21 Week 2 - So it begins!","date":"June 23, 2021","description":"Documenting the progress of the second week of Google Summer of Code","tags":["gsoc","open-source","metacall","week-2"],"disqus":true},"fields":{"langKey":"en"}}},"pageContext":{"slug":"/google-summer-of-code-week-2/","previous":null,"next":{"fields":{"slug":"/google-summer-of-code-week-1/","langKey":"en","directoryName":"google-summer-of-code-week-1"},"frontmatter":{"date":"June 16, 2021","title":"GSoC '21 Week 1 - One Ring to Rule them all!","tags":["gsoc","open-source","metacall","week-1"]}},"previousInSameTag":null,"nextInSameTag":{"fields":{"slug":"/google-summer-of-code-week-1/","langKey":"en","directoryName":"google-summer-of-code-week-1"},"frontmatter":{"date":"June 16, 2021","title":"GSoC '21 Week 1 - One Ring to Rule them all!","tags":["gsoc","open-source","metacall","week-1"]}},"translationsLink":[]}},"staticQueryHashes":["1522010811","262219000","2894998521","3765107650","592141294"]}